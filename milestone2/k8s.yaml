#
# Deployments
#
apiVersion: apps/v1
kind: Deployment
metadata: # adds a label to the pod
  name: apache-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: apache
  template: # the template is for adding the specifications about the pod of deployment
    metadata:
      labels:
        app: apache
    spec: # this spec is used for adding the details of the pod, in this case the container to be ran.
      containers:
        - name: apa-m2-rv
          image: robverbeek/apa-m2-rv
          ports: # exposes ports of the container
            - containerPort: 80 

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: fastapi-deployment
spec:
  replicas: 3 # in order to scale the backend in this project, 3 replicas of the API are created
  selector:
    matchLabels:
      app: fastapi
  template:
    metadata:
      labels:
        app: fastapi
    spec:
      containers:
        - name: fastapi-m2-rv
          image: robverbeek/fastapi-m2-rv
          ports:
            - containerPort: 8000

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgresql-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgresql
  template:
    metadata:
      labels:
        app: postgresql
    spec: 
      containers:
        - name: postres
          image: robverbeek/postgres-m2-rv
          ports:
            - containerPort: 5432
          env: # add environment variables to setup the database
            - name: POSTGRES_DB
              value: milestone2
            - name: POSTGRES_USER
              value: rob_verbeek
            - name: POSTGRES_PASSWORD
              value: milestone2
          volumeMounts: # mount the initial data into the database
            - name: init-volume
              mountPath: /docker-entrypoint-initdb.d
              readOnly: true
      volumes: # Instead of using a traditional volume, a configMap was used since the data for this database is very small
        - name: init-volume
          configMap:
            name: postgresql-init

---
#
# Services
#
apiVersion: v1
kind: Service
metadata:
  name: apache-service
  namespace: default # by default the namespace is default, I added this for clarity.
spec:
  selector: # the selector will route incoming traffic to the pods with a corresponding label
    app: apache 
  ports: # Specify which ports to listen on and where to route incoming traffic.
    - protocol: TCP
      port: 80
      targetPort: 80

---

apiVersion: v1
kind: Service
metadata:
  name: fastapi-service
  namespace: default
spec:
  selector:
    app: fastapi
  ports:
    - protocol: TCP
      port: 8000
      targetPort: 8000

---

apiVersion: v1
kind: Service
metadata:
  name: postgres
  namespace: default
spec:
  selector:
    app: postgresql
  ports:
    - protocol: TCP
      port: 5432
      targetPort: 5432

---
#
# Config Map for the postgres database
# 
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgresql-init
data:
  init.sql: |
    CREATE TABLE user_data (
        name VARCHAR(100)
    );

    INSERT INTO user_data (name)
    VALUES ('Rob Verbeek');

---
#
# INGRESS
#
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: milestone2-ingress
spec:
  rules:
    - http: # route traffic via http
        paths: # define the different paths to route
        - path: /
          pathType: Prefix
          backend:
            service:
              name: apache-service
              port:
                number: 80
        - path: /user # requests made to /user will go to the api and retrieve user_data
          pathType: Prefix
          backend:
            service:
              name: fastapi-service
              port:
                number: 8000
        - path: /container # requests made to /container will go to the api and retrieve the container Id
          pathType: Prefix
          backend:
            service:
              name: fastapi-service
              port:
                number: 8000








